/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        ListNode* head = NULL;
        ListNode* tail = NULL;
        
        int first = 0;
        
        while(l1 != NULL && l2 != NULL)
        {
            if(l1->val <= l2->val)
            {
                if(first == 0)
                {
                    head = new ListNode();
                    head->val = l1->val;
                    tail = head;
                    first = 1;
                }
                else
                {
                    ListNode* curr = new ListNode();
                    curr->val = l1->val;
                    tail->next = curr;
                    tail = curr;
                }
                
                l1 = l1->next;
            }
            else
            {
                if(first == 0)
                {
                    head = new ListNode();
                    head->val = l2->val;
                    tail = head;
                    first = 1;
                }
                else
                {
                    ListNode* curr = new ListNode();
                    curr->val = l2->val;
                    tail->next = curr;
                    tail = curr;
                }
                
                l2 = l2->next;
            }
        }
        
        while(l1 != NULL)
        {
            if(first == 0)
            {
                head = new ListNode();
                head->val = l1->val;
                tail = head;
                first = 1;
            }
            else
            {
                ListNode* curr = new ListNode();
                curr->val = l1->val;
                tail->next = curr;
                tail = curr;
            }

            l1 = l1->next;
        }
        
        while(l2 != NULL)
        {
            if(first == 0)
            {
                head = new ListNode();
                head->val = l2->val;
                tail = head;
                first = 1;
            }
            else
            {
                ListNode* curr = new ListNode();
                curr->val = l2->val;
                tail->next = curr;
                tail = curr;
            }

            l2 = l2->next;
        }
        
        return head;
    }
};